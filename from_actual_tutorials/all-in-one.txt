
//below for conditionals
#include <stdio.h>

int main() {
    guessNumber(500);
    guessNumber(600);
    guessNumber(555);
}

void guessNumber(int guess) {
    // TODO: write your code here
    if (guess < 555) 
        printf("Your guess is too low.\n");
    else if (guess > 555) 
        printf("Your guess is too high.\n");
    else 
        printf("Correct. You guessed it!\n");
    
}

//for multidimensional arrays
	#include <stdio.h>

	int main() {
		int grades[2][5];
		float average;
		int i;
		int j;

		grades[0][0] = 80;
		grades[0][1] = 70;
		grades[0][2] = 65;
		grades[0][3] = 89;
		grades[0][4] = 90;

		grades[1][0] = 85;
		grades[1][1] = 80;
		grades[1][2] = 80;
		grades[1][3] = 82;
		grades[1][4] = 87;

		for (i = 0; i < 2; i++) {
			average = 0;
			
			for (j = 0; j < 5; j++) {
				average += grades[i][j];
			}

			average = average/j;
			printf("The average marks obtained in subject %d is: %.2f\n", i, average);
		}

		return 0;
	}

//covers String expressions
#include <stdio.h>
#include <string.h>
int main() {
  /* define first_name */
    char * first_name = "John";
  /* define last_name */
    char last_name[] = "Doe";
  char name[100];

  last_name[0] = 'B'; //changes "D" in doe to "Boe"
  sprintf(name, "%s %s", first_name, last_name);
  if (strncmp(name, "John Boe", 100) == 0) {
      printf("Done!\n");
  }
  name[0]='\0'; //assume gives a null value to that element
  strncat(name,first_name,4); //concatenates with first name
  strncat(name,last_name,20); //w/o spacing concatenates last name
  printf("%s\n",name);
  return 0;
}

//covers for loops
#include <stdio.h>

int main() {
  int array[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
  int factorial = 1;
  int i;

  /* calculate the factorial using a for loop  here*/
    for(i = 0; i < sizeof(array)/sizeof(int); i++){
     factorial *= array[i];   
    }

    printf("10! is %d.\n", factorial);
}

//for while loops
#include <stdio.h>

int main() {
    int array[] = {1, 7, 4, 5, 9, 3, 5, 11, 6, 3, 4};
    int i = 0;

    while (i < 10) {
        /* your code goes here */
        if(array[i] < 5){
            i++;
            continue;
        }
        else if(array[i] > 10){
            break;
        }   
        printf("%d\n", array[i]);
        i++;
    }

    return 0;
}

//for function making
#include <stdio.h>

/* function declaration */
void print_big(int number);

int main() {
  int array[] = { 1, 11, 2, 22, 3, 33 };
  int i;
  for (i = 0; i < 6; i++) {
    print_big(array[i]);
  }
  return 0;
}

/* write your function here */
void print_big(int x){
 
    if(x > 10){
        printf("%d is big\n", x);
    }
    
}


//static fcn's
   #include <stdio.h>
   int sum (int num) {
       /**
       * find sum to n numbers
       */
       static int sum;
       sum += num;
       return sum;
   }

   int main() {
       printf("%d ",sum(55));
       printf("%d ",sum(45));
       printf("%d ",sum(50));
       return 0;
   }

//Use malloc to dynamically allocate a point structure.

#include <stdio.h>
#include <stdlib.h>

typedef struct {
  int x;
  int y;
} point;

int main() {
  point * mypoint;

  /* Dynamically allocate a new point
     struct which mypoint points to here */
    mypoint = malloc(sizeof(point));

  mypoint->x = 10;
  mypoint->y =5 ;
  printf("mypoint coordinates: %d, %d\n", mypoint->x, mypoint->y);

  free(mypoint);
  return 0;
}


//The first seven rows of Pascal's triangle are shown below. Note that row i contains i elements. 
//Therefore, to store the numbers from the first three rows, one would require 1 + 2 + 3 = 6 memory slots.
/*
1

1 1

1 2 1

1 3 3 1

1 4 6 4 1

1 5 10 10 5 1

1 6 15 20 15 6 1

Complete the skeleton code given below to store the numbers from the first three rows of Pascal's triangle in a two-dimensional "array" using dynamic memory allocation. Note that you must allocate exactly six memory slots to store those six numbers. No extra memory should be allocated. At the end of your program, free all the memory blocks used in this program.
*/


#include <stdio.h>
#include <stdlib.h>

int main() {
    int i, j;
    /* TODO: define the 2D pointer variable here */
    int ** pnumbers;
    

    /* TODO: complete the following line to allocate memory for holding three rows */
    pnumbers = (int **) malloc(i*sizeof(int *));

    /* TODO: allocate memory for storing the individual elements in a row */
    pnumbers[0] = (int *) malloc(1 * sizeof(int));
    pnumbers[1] = (int *) malloc(2 * sizeof(int));
    pnumbers[2] = (int *) malloc(3 * sizeof(int));


    pnumbers[0][0] = 1;
    pnumbers[1][0] = 1;
    pnumbers[1][1] = 1;
    pnumbers[2][0] = 1;
    pnumbers[2][1] = 2;
    pnumbers[2][2] = 1;

    for (i = 0; i < 3; i++) {
        for (j = 0; j <= i; j++) {
            printf("%d", pnumbers[i][j]);
        }
        printf("\n");
    }

    for (i = 0; i < 3; i++) {
        /* TODO: free memory allocated for each row */
        free(pnumbers[i]);
    }

    /* TODO: free the top-level pointer */
             free(pnumbers);

  return 0;
}
